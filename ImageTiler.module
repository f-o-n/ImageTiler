<?php namespace ProcessWire;

include "Utils.php";

class ImageTiler extends WireData implements Module, ConfigurableModule  {

  public static function getModuleInfo() {

    return array(
      'title' 		=> 'ImageTiler',
      'version' 	=> '0.1',
      'summary' 	=> 'This module splits large images into smaller tiles',
      'href' 			=> 'https://processwire.com',
      'singular' 	=> true,
      'autoload' 	=> true,
      'icon'     	=> 'th'
    );
  }

  public function init() {

  }

  public function ready() {

    $this->addHookAfter('InputfieldImage::getFileActions', function(HookEvent $event) {
      $event->return = array(
        'cretile' => 'Create Tiles',
        'reltile' => 'Reload Tiles',
        'deltile' => 'Delete Tiles',
        '-' => '-'
      ) + $event->return;
    });

    $this->addHookAfter('InputfieldImage::processUnknownFileAction', function(HookEvent $event) {
      $image = $event->argumentsByName("pagefile");
      $actionId = $event->arguments[1];
      $actionName = $event->arguments[2];
      $path = "";

      if($actionId == 'cretile') {
        $path = $this->CreateTiles($image);
        $event->return = is_dir($path);
      } else if($actionId == 'reltile') {
		$removed = $this->RemoveTiles($image);
        $path = $this->CreateTiles($image);
        $event->return = $removed && is_dir($path);
      } else if($actionId == 'deltile') {
        $event->return = $this->RemoveTiles($image);
      } else if($actionId == '-') { // just a spacer
        $event->return = false;
      }
    });
	
	//Frontend $image->tile($create);
    $this->addHook('Pageimage::tile', function(HookEvent $event) {
      $image = $event->object;
      $create = $event->arguments(0);
      if($create || is_dir($this->GetTilePath($image))) {
        $path = $this->CreateTiles($image);
        $event->return = $this->GetTileData($image, $path);
      } else {
        $event->return = [];
      }
    });

    $this->addHook('Pageimages::delete', function(HookEvent $event) {
      $image = $event->arguments(0);
      $this->RemoveTiles($image);
    });

  }

  protected function CreateTiles(Pageimage $image) {
    $destination = $this->GetTilePath($image);

    if(is_dir($destination)) {
      return $destination;
    }

    tileImage($image->filename, $destination, $this->format, $this->quality, $this->tileSize, $this->fillColor);

    return $destination;
  }

  protected function RemoveTiles(Pageimage $image) {
    $path = $this->GetTilePath($image);

	if(is_dir($path)) {
      rrmdir($path);
    }
    return !is_dir($path);
  }

  protected function GetTilePath($image) {
    return pathinfo($image->filename, PATHINFO_DIRNAME) . '/' .
    pathinfo($image->filename, PATHINFO_FILENAME);
  }
  
  public function GetTileData(Pageimage $image, $path) {
    $subDirs = array_filter(glob($path . '/*'), 'is_dir');
    $subDirs = str_replace($path . '/', '', $subDirs);
    return array(
      "url" => str_replace($_SERVER['DOCUMENT_ROOT'], '', $path),
      "tileSize" => $this->tileSize,
      "minZoom" => !empty($subDirs) ? min($subDirs) : '',
      "maxZoom" => !empty($subDirs) ? max($subDirs) : '',
      "imageWidth" => $image->width,
      "imageHeight" => $image->height,
      "imageExt" => pathinfo($image->filename, PATHINFO_EXTENSION)
    );
  }

}
