<?php namespace ProcessWire;

include "Utils.php";
include "MapTiler.php";
use MapTiler;

class ImageTiler extends WireData implements Module, ConfigurableModule  {

  public static function getModuleInfo() {

    return array(
      'title' 		=> 'ImageTiler',
      'version' 	=> '0.0.1',
      'summary' 	=> 'This module splits large images into smaller tiles',
      'href' 			=> 'https://processwire.com',
      'singular' 	=> true,
      'autoload' 	=> true,
      'icon'     	=> 'th'
    );
  }

  public function init() {

  }

  public function ready() {

    $this->addHookAfter('InputfieldImage::getFileActions', function(HookEvent $event) {
      $event->return = array(
        'gentile' => 'Generate Tiles',
        'reftile' => 'Refresh Tiles',
        'deltile' => 'Delete Tiles',
        '-' => '-'
      ) + $event->return;
    });

    $this->addHookAfter('InputfieldImage::processUnknownFileAction', function(HookEvent $event) {
      $image = $event->argumentsByName("pagefile");
      $actionId = $event->arguments[1];
      $actionName = $event->arguments[2];
      $path = "";

      if($actionId == 'gentile') {
        $path = $this->GenerateTilesForImage($image);
        $event->return = is_dir($path);
      } else if($actionId == 'reftile') {
        $path = $this->GenerateTilesForImage($image, true);
        $event->return = is_dir($path);
      } else if($actionId == 'deltile') {
        $event->return = $this->RemoveTilesForImage($image);
      } else if($actionId == '-') { // just a spacer
        $event->return = false;
      }
    });

    //Frontend $image->tile($refresh);
    $this->addHook('Pageimage::tile', function(HookEvent $event) {
      $image = $event->object;
      $refreshTiles = $event->arguments(0);

      $path = $this->GenerateTilesForImage($image, $refreshTiles);
      $event->return = $this->GetTileData($path);
    });

    $this->addHook('Pagefiles::delete', function(HookEvent $event) {
      $image = $event->arguments(0);
      $this->RemoveTilesForImage($image);
    });

  }

  public function GetTileData($path) {
    $subDirs = array_filter(glob($path . '/*'), 'is_dir');
    $subDirs = str_replace($path . '/', '', $subDirs);
    return array(
      "folderUrl" => str_replace($_SERVER['DOCUMENT_ROOT'], '', $path),
      "tileSize" => $this->tileSize,
      "minZoom" => min($subDirs),
      "maxZoom" => max($subDirs),
    );
  }

  protected function GenerateTilesForImage(Pageimage $image, $refreshTiles = false) {
    $tileFolderPath = $this->GetTileFolderPath($image);

    if($refreshTiles == true) {
      $this->RemoveTiles($tileFolderPath);
    }

    if(is_dir($tileFolderPath)) {
      return $tileFolderPath;
    }

    $tileOptions = array(
      "tiles_path" => $tileFolderPath,
      "tile_size" => $this->tileSize,
      "store_structure" => $this->storeStructure,
      "tms" => $this->tms,
      "fill_color" => $this->fillColor,
      "zoom_min" => $this->zoomMin,
      "zoom_max" => $this->zoomMax,
      "scaling_up" => $this->scalingUp,
      "format" => $this->format,
      "quality_jpeg" => $this->qualityJpeg
    );

    $tilerWorker = new MapTiler($image->filename, $tileOptions);
    $tilerWorker->process(true);

    return $tileFolderPath;
  }

  protected function RemoveTilesForImage(Pageimage $image) {
    $path = $this->GetTileFolderPath($image);
    return $this->RemoveTiles($path);
  }

  protected function RemoveTiles($path) {
    if(is_dir($path)) {
      rrmdir($path);
    }
    return !is_dir($path);
  }

  protected function GetTileFolderPath(Pageimage $image) {
    return pathinfo($image->filename, PATHINFO_DIRNAME) . '/' .
    pathinfo($image->filename, PATHINFO_FILENAME);
  }

}
